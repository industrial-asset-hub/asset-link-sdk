# SPDX-FileCopyrightText: 2023 Siemens AG
#
# SPDX-License-Identifier:

include:
  - project: "common-device-management/utils/templates/gitlab-ci"
    ref: main
    file: "shared/base.yaml"
  - project: "common-device-management/utils/templates/gitlab-ci"
    ref: main
    file: "shared/pre-commit.yaml"

stages:
  - check
  - version
  - lint
  - test
  - build
  - release

variables:
  https_proxy: $CODE_PROXY
  http_proxy: $CODE_PROXY
  no_proxy: $CODE_NO_PROXY
  HTTP_PROXY: "$CODE_PROXY"
  HTTPS_PROXY: "$CODE_PROXY"
  NO_PROXY: $CODE_NO_PROXY
  GO_BUILD_IMAGE: golang:1.20.0-alpine
  CGO_ENABLED: 0
  COOKIECUTTER_PROJECT: cookiecutter-test/
  COOKIECUTTER_PROJECT_NAME: dcd-test

# sets credentials to access private GO modules located in code.siemens.com
.set_git_https_credentials: &set_git_https_credentials |
  git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@code.siemens.com/".insteadOf https://code.siemens.com/

.set_netrc: &set_netrc |
  echo -e "machine code.siemens.com\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc

.protoc-go: &protoc-go
  - export GOPATH=$HOME/go
  - export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
  - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
  - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

# Place temporary go.mod file, inside cookiecutter  project dir to make go test happy
.cookiecutter_gomod-quirk: &cookiecutter_gomod-quirk ( cd cookiecutter-project-template/*/ && cp ../../go.mod go.mod)
# Lint
lint:
  image: $GO_BUILD_IMAGE
  stage: lint
  variables:
    GOLANGCILINT_VERSION: "v1.51.2"
  before_script:
    - apk add --no-cache ca-certificates git jq bash curl protobuf-dev
    - echo -e "machine code.siemens.com\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
    - UPSTREAM_URL=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
    - export BINDIR=/usr/local/bin
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@$GOLANGCILINT_VERSION
    - *protoc-go
  script:
    - *cookiecutter_gomod-quirk
    - go generate
    - golangci-lint run --out-format code-climate | tee code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: code-quality-report.json
    paths:
      - code-quality-report.json
  allow_failure: true

reuse:
  stage: lint
  needs: []
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint
  allow_failure: true

unit-tests:
  stage: test
  needs: []
  image: $GO_BUILD_IMAGE
  variables:
    CGO_ENABLED: 1
  script:
    - apk add --no-cache git curl gcc libc-dev protobuf-dev
    - *set_git_https_credentials
    - *cookiecutter_gomod-quirk
    - *protoc-go
    - go generate
    - go test --race ./... -covermode=atomic -coverprofile=coverage.txt -v
    - go tool cover -func=coverage.txt
    - go tool cover -html=coverage.txt -o coverage.html
  artifacts:
    expire_in: 1 day
    paths:
      - coverage.txt
      - coverage.html

cookiecutter-setup:
  stage: test
  needs: []
  image: cr.siemens.com/code-ops/poetry-docker:1.3-py3.11
  variables:
    GIT_STRATEGY: clone
  before_script:
    - python -m pip install pipx
    - python -m pipx ensurepath
    - pipx install cookiecutter
    - source ~/.bashrc
    - cookiecutter --version
  script:
    # Copy pre-defined cookiecutter replay template
    - mkdir -p ~/.cookiecutter_replay/
    - cp ${CI_PROJECT_DIR}/cookiecutter-project-template/cookiecutter-project-template.json ~/.cookiecutter_replay/cookiecutter-project-template.json
    - mkdir ${COOKIECUTTER_PROJECT}
    - cd ${COOKIECUTTER_PROJECT}
    - cookiecutter ${CI_PROJECT_DIR}/cookiecutter-project-template/ --replay
    # directory to the config.yaml used by cookiecutter
    - cd ${COOKIECUTTER_PROJECT_NAME}
    - ls
  cache:
    key: "$CI_PIPELINE_ID-$CI_COMMIT_REF_SLUG-COOKIECUTTER"
    paths:
      - $COOKIECUTTER_PROJECT/${COOKIECUTTER_PROJECT_NAME}
    policy: pull-push

.go-build:
  stage: build
  image: archlinux:latest
  variables:
    GONOSUMDB: code.siemens.com
    GOPRIVATE: code.siemens.com
  before_script:
    - pacman -Syu --noconfirm
    - pacman -S --noconfirm go zig goreleaser git protobuf
    - *protoc-go

# Vendors the needed Go packages. This vendor/ is used, inside the
# release job, to include the vendor/ directory, into
# the generated cdm-dcd-sdk archiv. This also, updates the go.mod file w/
# the most recent tag of the cdm-dcd-sdk
# Caution: this removes the cookiecutter specific header of the go.mod file.
#          This header has to be restored inside the create-release job, to have
#          and full working released archive.
cookiecutter-vendor:
  extends: .go-build
  variables:
    GIT_STRATEGY: clone
  script:
    - *set_netrc
    - cd ${COOKIECUTTER_PROJECT}/${COOKIECUTTER_PROJECT_NAME}/
    - cp go.mod.tmpl go.mod
    - >
      if [ -z $CI_COMMIT_TAG ]; then
        echo "detected non-tag build"
        go get code.siemens.com/${CI_PROJECT_PATH}@${CI_COMMIT_SHA}
      else
        go get code.siemens.com/${CI_PROJECT_PATH}@${CI_COMMIT_TAG}
      fi
    # Prepare
    - cat go.mod
    - go generate ./...
    - go mod download
    - go mod tidy
    - cat go.mod
  cache:
    key: "$CI_PIPELINE_ID-$CI_COMMIT_REF_SLUG-COOKIECUTTER"
    paths:
      - $COOKIECUTTER_PROJECT
    policy: pull-push

# Builds the already bootstrapped DCD
# and uses the vendored files.
cookiecutter-build:
  extends: .go-build
  needs: ["cookiecutter-vendor"]
  variables:
    GIT_STRATEGY: clone
  script:
    - cd ${COOKIECUTTER_PROJECT}/${COOKIECUTTER_PROJECT_NAME}/
    - goreleaser build --snapshot --rm-dist --single-target
  cache:
    key: "$CI_PIPELINE_ID-$CI_COMMIT_REF_SLUG-COOKIECUTTER"
    paths:
      - $COOKIECUTTER_PROJECT
    policy: pull

build:
  extends: .go-build
  script:
    - *set_netrc
    - goreleaser build --snapshot --rm-dist --single-target
  artifacts:
    expire_in: 1 day
    paths: [dist]

create-release:
  stage: release
  image: archlinux:latest
  # disable artifact passing
  dependencies: []
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags
    GIT_DEPTH: 0
  before_script:
    - pacman -Syu --noconfirm
    - pacman -S --noconfirm go zig goreleaser git git-lfs protobuf
    - git lfs install
    - *protoc-go
  script:
    - *set_netrc
    # Copy go.mod and the vendor dir for the SDK archive to the into the cookiecutter template
    # the go.mod inside the cookiecutter-project-template does not have to contain the cdm-dcd-sdk. It is updated
    # inside the cookiecutter-vendor job
    - cp -a ${COOKIECUTTER_PROJECT}/${COOKIECUTTER_PROJECT_NAME}/go.mod cookiecutter-project-template/\{\{\ cookiecutter.dcd_name\ \}\}/
    # Replace first line inside go.mod, due to it's specific from the cookiecutter template
    - sed -i "1s/.*/module {{cookiecutter.dcd_name}}/" cookiecutter-project-template/\{\{\ cookiecutter.dcd_name\ \}\}/go.mod
    # Create release
    - |
      if [ "${CI_COMMIT_TAG:-}" != "" ]; then
          export GITLAB_TOKEN="$GITLAB_RELEASE_TOKEN"
          echo "*** Creating official release ***"
          goreleaser release --rm-dist
      else
          echo "*** Creating dry-run release ***"
          goreleaser release --rm-dist --snapshot
      fi
  artifacts:
    expire_in: 1 day
    paths:
      - dist
  cache:
    key: "$CI_PIPELINE_ID-$CI_COMMIT_REF_SLUG-COOKIECUTTER"
    paths:
      - $COOKIECUTTER_PROJECT
    policy: pull
