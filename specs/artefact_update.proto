// Artefact update interface
// This is the interface for pushing and pulling
// artefacts to and from drivers.
// The driver is responsible for the actual
// transfer of the artefact to the target device.

syntax = "proto3";

package factory_x.artefact_update.v1;

service ArtefactUpdateApi {
  // Push an artefact to a driver
  rpc PushArtefact(stream ArtefactChunk) returns (stream ArtefactUpdateStatus) {
  }
  // Load an artefact from a driver
  rpc PullArtefact(ArtefactMetaData) returns (stream ArtefactChunk) {}
}

message ArtefactChunk {
  oneof data {
    ArtefactMetaData metadata = 1; // first packet
    bytes file_content = 2; // following
    Status status = 3; // only for pull
  }
}

message ArtefactMetaData {
  // oneof meta {
    ArtefactCredentials credential = 1;
    bytes device_identifier = 2;
    ArtefactIdentifier artefact_identifier = 3;
  // }
}

message ArtefactCredentials {
  string credential_type = 1;
  bytes credentials = 2;
}

// Prefix with AS == Artefact status
// to be globally unique
enum TransferStatus {
  AS_OK = 0;
  AS_FAIL = 1;
  AS_IDENTITY_CHECK_FAIL = 2;
  AS_INCOMPATIBLE = 3;
}

message Status {
  TransferStatus status = 1;
  string message = 2;
}

enum ArtefactType {
  AT_FIRMWARE = 0;
  AT_BACKUP = 1;
  AT_CONFIGURATION = 2;
}

message ArtefactIdentifier { ArtefactType type = 1; }

enum ArtefactUpdateState {
  AUS_IDLE = 0;
  AUS_DOWNLOAD = 1;
  AUS_INSTALLATION = 2;
  AUS_ACTIVATION = 3;
}

message ArtefactUpdateStatus {
  Status status = 1;
  ArtefactUpdateState state = 2;
  int32 progress = 3;
}
