/*
 * Copyright (c) Siemens AG 2022 ALL RIGHTS RESERVED.
 */

syntax = "proto3";

import "google/protobuf/struct.proto";

package siemens.commondevicemanagement.devicediscovery.v1;

service DeviceDiscoveryApi {
    // start a device discovery with the given filters and options
    rpc StartDeviceDiscovery (DiscoveryRequest) returns (DiscoveryReply) {}
    // subscribe to the results of a previously started device discovery
    rpc SubscribeDiscoveryResults (DiscoveryResultsRequest) returns (stream DiscoveryResultsReply) {}
    // stop a running device discovery
    rpc StopDeviceDiscovery (StopDiscoveryRequest) returns (StopDiscoveryReply) {}
}

enum ComparisonOperator {
    EQUAL = 0;                      // ==
    NOT_EQUAL = 1;                  // !=
    GREATER_THAN = 2;               // >
    GREATER_THAN_OR_EQUAL_TO = 3;   // >=
    LESS_THAN = 4;                  // <
    LESS_THAN_OR_EQUAL_TO = 5;      // <=
}

message DiscoveryFilter {
    string key = 1;
    string value = 2;
    ComparisonOperator operator = 3;
}

message DiscoveryOption {
    string key = 1;
    string value = 2;
    ComparisonOperator operator = 3;
}

message DiscoveryRequest {
    /*
    values of identical keys are logically "OR" combined
    values of different keys are logically "AND" combined
    */
    repeated DiscoveryFilter filters = 1;
    /*
    values of identical keys are logically "OR" combined
    values of different keys are logically "AND" combined
    */
    repeated DiscoveryOption options = 2;
}

message DiscoveryReply {
    uint32 discovery_id = 1;
}

message DiscoveryResultsRequest {
    uint32 discovery_id = 1;
}

message DiscoveryDevice {
    // the semantics expected by the CDM discovery client is defined in the device-parameter-schema.json
    google.protobuf.Struct parameters = 1;
}

message DiscoveryResultsReply {
    repeated DiscoveryDevice devices = 1;
}

message StopDiscoveryRequest {
    uint32 discovery_id = 1;
}

message StopDiscoveryReply {
}
