//
// Copyright (c) Siemens AG 2022 ALL RIGHTS RESERVED.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: status.proto

package status

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DcdStatus_GetHealth_FullMethodName  = "/siemens.commondevicemanagement.status.v1.DcdStatus/GetHealth"
	DcdStatus_GetVersion_FullMethodName = "/siemens.commondevicemanagement.status.v1.DcdStatus/GetVersion"
)

// DcdStatusClient is the client API for DcdStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DcdStatusClient interface {
	GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error)
	GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error)
}

type dcdStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewDcdStatusClient(cc grpc.ClientConnInterface) DcdStatusClient {
	return &dcdStatusClient{cc}
}

func (c *dcdStatusClient) GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, DcdStatus_GetHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcdStatusClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error) {
	out := new(VersionReply)
	err := c.cc.Invoke(ctx, DcdStatus_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DcdStatusServer is the server API for DcdStatus service.
// All implementations must embed UnimplementedDcdStatusServer
// for forward compatibility
type DcdStatusServer interface {
	GetHealth(context.Context, *HealthRequest) (*HealthReply, error)
	GetVersion(context.Context, *VersionRequest) (*VersionReply, error)
	mustEmbedUnimplementedDcdStatusServer()
}

// UnimplementedDcdStatusServer must be embedded to have forward compatible implementations.
type UnimplementedDcdStatusServer struct {
}

func (UnimplementedDcdStatusServer) GetHealth(context.Context, *HealthRequest) (*HealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedDcdStatusServer) GetVersion(context.Context, *VersionRequest) (*VersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDcdStatusServer) mustEmbedUnimplementedDcdStatusServer() {}

// UnsafeDcdStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DcdStatusServer will
// result in compilation errors.
type UnsafeDcdStatusServer interface {
	mustEmbedUnimplementedDcdStatusServer()
}

func RegisterDcdStatusServer(s grpc.ServiceRegistrar, srv DcdStatusServer) {
	s.RegisterService(&DcdStatus_ServiceDesc, srv)
}

func _DcdStatus_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcdStatusServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcdStatus_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcdStatusServer).GetHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcdStatus_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcdStatusServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcdStatus_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcdStatusServer).GetVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DcdStatus_ServiceDesc is the grpc.ServiceDesc for DcdStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DcdStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "siemens.commondevicemanagement.status.v1.DcdStatus",
	HandlerType: (*DcdStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _DcdStatus_GetHealth_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _DcdStatus_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "status.proto",
}
