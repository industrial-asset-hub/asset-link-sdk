//
// Copyright (c) Siemens AG 2022 ALL RIGHTS RESERVED.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: device-discovery.proto

package device_discovery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceDiscoveryApi_StartDeviceDiscovery_FullMethodName      = "/siemens.commondevicemanagement.devicediscovery.v1.DeviceDiscoveryApi/StartDeviceDiscovery"
	DeviceDiscoveryApi_SubscribeDiscoveryResults_FullMethodName = "/siemens.commondevicemanagement.devicediscovery.v1.DeviceDiscoveryApi/SubscribeDiscoveryResults"
	DeviceDiscoveryApi_StopDeviceDiscovery_FullMethodName       = "/siemens.commondevicemanagement.devicediscovery.v1.DeviceDiscoveryApi/StopDeviceDiscovery"
)

// DeviceDiscoveryApiClient is the client API for DeviceDiscoveryApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceDiscoveryApiClient interface {
	// start a device discovery with the given filters and options
	StartDeviceDiscovery(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryReply, error)
	// subscribe to the results of a previously started device discovery
	SubscribeDiscoveryResults(ctx context.Context, in *DiscoveryResultsRequest, opts ...grpc.CallOption) (DeviceDiscoveryApi_SubscribeDiscoveryResultsClient, error)
	// stop a running device discovery
	StopDeviceDiscovery(ctx context.Context, in *StopDiscoveryRequest, opts ...grpc.CallOption) (*StopDiscoveryReply, error)
}

type deviceDiscoveryApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceDiscoveryApiClient(cc grpc.ClientConnInterface) DeviceDiscoveryApiClient {
	return &deviceDiscoveryApiClient{cc}
}

func (c *deviceDiscoveryApiClient) StartDeviceDiscovery(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryReply, error) {
	out := new(DiscoveryReply)
	err := c.cc.Invoke(ctx, DeviceDiscoveryApi_StartDeviceDiscovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDiscoveryApiClient) SubscribeDiscoveryResults(ctx context.Context, in *DiscoveryResultsRequest, opts ...grpc.CallOption) (DeviceDiscoveryApi_SubscribeDiscoveryResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceDiscoveryApi_ServiceDesc.Streams[0], DeviceDiscoveryApi_SubscribeDiscoveryResults_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDiscoveryApiSubscribeDiscoveryResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDiscoveryApi_SubscribeDiscoveryResultsClient interface {
	Recv() (*DiscoveryResultsReply, error)
	grpc.ClientStream
}

type deviceDiscoveryApiSubscribeDiscoveryResultsClient struct {
	grpc.ClientStream
}

func (x *deviceDiscoveryApiSubscribeDiscoveryResultsClient) Recv() (*DiscoveryResultsReply, error) {
	m := new(DiscoveryResultsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceDiscoveryApiClient) StopDeviceDiscovery(ctx context.Context, in *StopDiscoveryRequest, opts ...grpc.CallOption) (*StopDiscoveryReply, error) {
	out := new(StopDiscoveryReply)
	err := c.cc.Invoke(ctx, DeviceDiscoveryApi_StopDeviceDiscovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceDiscoveryApiServer is the server API for DeviceDiscoveryApi service.
// All implementations must embed UnimplementedDeviceDiscoveryApiServer
// for forward compatibility
type DeviceDiscoveryApiServer interface {
	// start a device discovery with the given filters and options
	StartDeviceDiscovery(context.Context, *DiscoveryRequest) (*DiscoveryReply, error)
	// subscribe to the results of a previously started device discovery
	SubscribeDiscoveryResults(*DiscoveryResultsRequest, DeviceDiscoveryApi_SubscribeDiscoveryResultsServer) error
	// stop a running device discovery
	StopDeviceDiscovery(context.Context, *StopDiscoveryRequest) (*StopDiscoveryReply, error)
	mustEmbedUnimplementedDeviceDiscoveryApiServer()
}

// UnimplementedDeviceDiscoveryApiServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceDiscoveryApiServer struct {
}

func (UnimplementedDeviceDiscoveryApiServer) StartDeviceDiscovery(context.Context, *DiscoveryRequest) (*DiscoveryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDeviceDiscovery not implemented")
}
func (UnimplementedDeviceDiscoveryApiServer) SubscribeDiscoveryResults(*DiscoveryResultsRequest, DeviceDiscoveryApi_SubscribeDiscoveryResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDiscoveryResults not implemented")
}
func (UnimplementedDeviceDiscoveryApiServer) StopDeviceDiscovery(context.Context, *StopDiscoveryRequest) (*StopDiscoveryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDeviceDiscovery not implemented")
}
func (UnimplementedDeviceDiscoveryApiServer) mustEmbedUnimplementedDeviceDiscoveryApiServer() {}

// UnsafeDeviceDiscoveryApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceDiscoveryApiServer will
// result in compilation errors.
type UnsafeDeviceDiscoveryApiServer interface {
	mustEmbedUnimplementedDeviceDiscoveryApiServer()
}

func RegisterDeviceDiscoveryApiServer(s grpc.ServiceRegistrar, srv DeviceDiscoveryApiServer) {
	s.RegisterService(&DeviceDiscoveryApi_ServiceDesc, srv)
}

func _DeviceDiscoveryApi_StartDeviceDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDiscoveryApiServer).StartDeviceDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDiscoveryApi_StartDeviceDiscovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDiscoveryApiServer).StartDeviceDiscovery(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDiscoveryApi_SubscribeDiscoveryResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiscoveryResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDiscoveryApiServer).SubscribeDiscoveryResults(m, &deviceDiscoveryApiSubscribeDiscoveryResultsServer{stream})
}

type DeviceDiscoveryApi_SubscribeDiscoveryResultsServer interface {
	Send(*DiscoveryResultsReply) error
	grpc.ServerStream
}

type deviceDiscoveryApiSubscribeDiscoveryResultsServer struct {
	grpc.ServerStream
}

func (x *deviceDiscoveryApiSubscribeDiscoveryResultsServer) Send(m *DiscoveryResultsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceDiscoveryApi_StopDeviceDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDiscoveryApiServer).StopDeviceDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDiscoveryApi_StopDeviceDiscovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDiscoveryApiServer).StopDeviceDiscovery(ctx, req.(*StopDiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceDiscoveryApi_ServiceDesc is the grpc.ServiceDesc for DeviceDiscoveryApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceDiscoveryApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "siemens.commondevicemanagement.devicediscovery.v1.DeviceDiscoveryApi",
	HandlerType: (*DeviceDiscoveryApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDeviceDiscovery",
			Handler:    _DeviceDiscoveryApi_StartDeviceDiscovery_Handler,
		},
		{
			MethodName: "StopDeviceDiscovery",
			Handler:    _DeviceDiscoveryApi_StopDeviceDiscovery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDiscoveryResults",
			Handler:       _DeviceDiscoveryApi_SubscribeDiscoveryResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device-discovery.proto",
}
