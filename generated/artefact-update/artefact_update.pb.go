// Artefact update interface
// This is the interface for pushing and pulling
// artefacts to and from drivers.
// The driver is responsible for the actual
// transfer of the artefact to the target device.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: artefact_update.proto

package artefact_update

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArtefactType int32

const (
	ArtefactType_AT_FIRMWARE      ArtefactType = 0
	ArtefactType_AT_SOFTWARE      ArtefactType = 1
	ArtefactType_AT_BACKUP        ArtefactType = 2
	ArtefactType_AT_CONFIGURATION ArtefactType = 3
	ArtefactType_AT_LOGFILE       ArtefactType = 4
)

// Enum value maps for ArtefactType.
var (
	ArtefactType_name = map[int32]string{
		0: "AT_FIRMWARE",
		1: "AT_SOFTWARE",
		2: "AT_BACKUP",
		3: "AT_CONFIGURATION",
		4: "AT_LOGFILE",
	}
	ArtefactType_value = map[string]int32{
		"AT_FIRMWARE":      0,
		"AT_SOFTWARE":      1,
		"AT_BACKUP":        2,
		"AT_CONFIGURATION": 3,
		"AT_LOGFILE":       4,
	}
)

func (x ArtefactType) Enum() *ArtefactType {
	p := new(ArtefactType)
	*p = x
	return p
}

func (x ArtefactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtefactType) Descriptor() protoreflect.EnumDescriptor {
	return file_artefact_update_proto_enumTypes[0].Descriptor()
}

func (ArtefactType) Type() protoreflect.EnumType {
	return &file_artefact_update_proto_enumTypes[0]
}

func (x ArtefactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtefactType.Descriptor instead.
func (ArtefactType) EnumDescriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{0}
}

type ArtefactOperationState int32

const (
	ArtefactOperationState_AOS_OK                        ArtefactOperationState = 0
	ArtefactOperationState_AOS_ERROR_FAIL                ArtefactOperationState = 1
	ArtefactOperationState_AOS_ERROR_IDENTITY_CHECK_FAIL ArtefactOperationState = 2
	ArtefactOperationState_AOS_ERROR_INCOMPATIBLE        ArtefactOperationState = 3
	ArtefactOperationState_AOS_ERROR_NOT_SUPPORTED       ArtefactOperationState = 4 // TBD ...
)

// Enum value maps for ArtefactOperationState.
var (
	ArtefactOperationState_name = map[int32]string{
		0: "AOS_OK",
		1: "AOS_ERROR_FAIL",
		2: "AOS_ERROR_IDENTITY_CHECK_FAIL",
		3: "AOS_ERROR_INCOMPATIBLE",
		4: "AOS_ERROR_NOT_SUPPORTED",
	}
	ArtefactOperationState_value = map[string]int32{
		"AOS_OK":                        0,
		"AOS_ERROR_FAIL":                1,
		"AOS_ERROR_IDENTITY_CHECK_FAIL": 2,
		"AOS_ERROR_INCOMPATIBLE":        3,
		"AOS_ERROR_NOT_SUPPORTED":       4,
	}
)

func (x ArtefactOperationState) Enum() *ArtefactOperationState {
	p := new(ArtefactOperationState)
	*p = x
	return p
}

func (x ArtefactOperationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtefactOperationState) Descriptor() protoreflect.EnumDescriptor {
	return file_artefact_update_proto_enumTypes[1].Descriptor()
}

func (ArtefactOperationState) Type() protoreflect.EnumType {
	return &file_artefact_update_proto_enumTypes[1]
}

func (x ArtefactOperationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtefactOperationState.Descriptor instead.
func (ArtefactOperationState) EnumDescriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{1}
}

type ArtefactOperationPhase int32

const (
	ArtefactOperationPhase_AOP_UNSPECIFIED  ArtefactOperationPhase = 0
	ArtefactOperationPhase_AOP_PREPARE      ArtefactOperationPhase = 1
	ArtefactOperationPhase_AOP_DOWNLOAD     ArtefactOperationPhase = 2
	ArtefactOperationPhase_AOP_INSTALLATION ArtefactOperationPhase = 3
	ArtefactOperationPhase_AOP_ACTIVATION   ArtefactOperationPhase = 4
	ArtefactOperationPhase_AOP_ARCHIVE      ArtefactOperationPhase = 5
	ArtefactOperationPhase_AOP_UPLOAD       ArtefactOperationPhase = 6 // TBD ...
)

// Enum value maps for ArtefactOperationPhase.
var (
	ArtefactOperationPhase_name = map[int32]string{
		0: "AOP_UNSPECIFIED",
		1: "AOP_PREPARE",
		2: "AOP_DOWNLOAD",
		3: "AOP_INSTALLATION",
		4: "AOP_ACTIVATION",
		5: "AOP_ARCHIVE",
		6: "AOP_UPLOAD",
	}
	ArtefactOperationPhase_value = map[string]int32{
		"AOP_UNSPECIFIED":  0,
		"AOP_PREPARE":      1,
		"AOP_DOWNLOAD":     2,
		"AOP_INSTALLATION": 3,
		"AOP_ACTIVATION":   4,
		"AOP_ARCHIVE":      5,
		"AOP_UPLOAD":       6,
	}
)

func (x ArtefactOperationPhase) Enum() *ArtefactOperationPhase {
	p := new(ArtefactOperationPhase)
	*p = x
	return p
}

func (x ArtefactOperationPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtefactOperationPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_artefact_update_proto_enumTypes[2].Descriptor()
}

func (ArtefactOperationPhase) Type() protoreflect.EnumType {
	return &file_artefact_update_proto_enumTypes[2]
}

func (x ArtefactOperationPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtefactOperationPhase.Descriptor instead.
func (ArtefactOperationPhase) EnumDescriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{2}
}

type ArtefactOperationRequestType int32

const (
	ArtefactOperationRequestType_AORT_ARTEFACT_TRANSMISSION ArtefactOperationRequestType = 0
)

// Enum value maps for ArtefactOperationRequestType.
var (
	ArtefactOperationRequestType_name = map[int32]string{
		0: "AORT_ARTEFACT_TRANSMISSION",
	}
	ArtefactOperationRequestType_value = map[string]int32{
		"AORT_ARTEFACT_TRANSMISSION": 0,
	}
)

func (x ArtefactOperationRequestType) Enum() *ArtefactOperationRequestType {
	p := new(ArtefactOperationRequestType)
	*p = x
	return p
}

func (x ArtefactOperationRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtefactOperationRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_artefact_update_proto_enumTypes[3].Descriptor()
}

func (ArtefactOperationRequestType) Type() protoreflect.EnumType {
	return &file_artefact_update_proto_enumTypes[3]
}

func (x ArtefactOperationRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtefactOperationRequestType.Descriptor instead.
func (ArtefactOperationRequestType) EnumDescriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{3}
}

type ArtefactChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*ArtefactChunk_Metadata
	//	*ArtefactChunk_FileContent
	//	*ArtefactChunk_Status
	Data isArtefactChunk_Data `protobuf_oneof:"data"`
}

func (x *ArtefactChunk) Reset() {
	*x = ArtefactChunk{}
	mi := &file_artefact_update_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtefactChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtefactChunk) ProtoMessage() {}

func (x *ArtefactChunk) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtefactChunk.ProtoReflect.Descriptor instead.
func (*ArtefactChunk) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{0}
}

func (m *ArtefactChunk) GetData() isArtefactChunk_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ArtefactChunk) GetMetadata() *ArtefactMetaData {
	if x, ok := x.GetData().(*ArtefactChunk_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *ArtefactChunk) GetFileContent() []byte {
	if x, ok := x.GetData().(*ArtefactChunk_FileContent); ok {
		return x.FileContent
	}
	return nil
}

func (x *ArtefactChunk) GetStatus() *ArtefactOperationStatus {
	if x, ok := x.GetData().(*ArtefactChunk_Status); ok {
		return x.Status
	}
	return nil
}

type isArtefactChunk_Data interface {
	isArtefactChunk_Data()
}

type ArtefactChunk_Metadata struct {
	Metadata *ArtefactMetaData `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"` // first packet for PushArtefact, PrepareUpdate, and ActivateUpdate
}

type ArtefactChunk_FileContent struct {
	FileContent []byte `protobuf:"bytes,2,opt,name=file_content,json=fileContent,proto3,oneof"` // regular artefact packets
}

type ArtefactChunk_Status struct {
	Status *ArtefactOperationStatus `protobuf:"bytes,3,opt,name=status,proto3,oneof"` // only for PullArtefact
}

func (*ArtefactChunk_Metadata) isArtefactChunk_Data() {}

func (*ArtefactChunk_FileContent) isArtefactChunk_Data() {}

func (*ArtefactChunk_Status) isArtefactChunk_Data() {}

type ArtefactMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobIdentifier       *JobIdentifier       `protobuf:"bytes,1,opt,name=job_identifier,json=jobIdentifier,proto3" json:"job_identifier,omitempty"`
	ArtefactIdentifier  *ArtefactIdentifier  `protobuf:"bytes,2,opt,name=artefact_identifier,json=artefactIdentifier,proto3" json:"artefact_identifier,omitempty"`
	ArtefactCredentials *ArtefactCredentials `protobuf:"bytes,3,opt,name=artefact_credentials,json=artefactCredentials,proto3" json:"artefact_credentials,omitempty"`
	DeviceIdentifier    *DeviceIdentifier    `protobuf:"bytes,4,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	DeviceCredentials   *DeviceCredentials   `protobuf:"bytes,5,opt,name=device_credentials,json=deviceCredentials,proto3" json:"device_credentials,omitempty"`
}

func (x *ArtefactMetaData) Reset() {
	*x = ArtefactMetaData{}
	mi := &file_artefact_update_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtefactMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtefactMetaData) ProtoMessage() {}

func (x *ArtefactMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtefactMetaData.ProtoReflect.Descriptor instead.
func (*ArtefactMetaData) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{1}
}

func (x *ArtefactMetaData) GetJobIdentifier() *JobIdentifier {
	if x != nil {
		return x.JobIdentifier
	}
	return nil
}

func (x *ArtefactMetaData) GetArtefactIdentifier() *ArtefactIdentifier {
	if x != nil {
		return x.ArtefactIdentifier
	}
	return nil
}

func (x *ArtefactMetaData) GetArtefactCredentials() *ArtefactCredentials {
	if x != nil {
		return x.ArtefactCredentials
	}
	return nil
}

func (x *ArtefactMetaData) GetDeviceIdentifier() *DeviceIdentifier {
	if x != nil {
		return x.DeviceIdentifier
	}
	return nil
}

func (x *ArtefactMetaData) GetDeviceCredentials() *DeviceCredentials {
	if x != nil {
		return x.DeviceCredentials
	}
	return nil
}

type JobIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` //OperationType operation_type = 2;
}

func (x *JobIdentifier) Reset() {
	*x = JobIdentifier{}
	mi := &file_artefact_update_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobIdentifier) ProtoMessage() {}

func (x *JobIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobIdentifier.ProtoReflect.Descriptor instead.
func (*JobIdentifier) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{2}
}

func (x *JobIdentifier) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type ArtefactIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ArtefactType `protobuf:"varint,1,opt,name=type,proto3,enum=factory_x.artefact_update.v1.ArtefactType" json:"type,omitempty"`
}

func (x *ArtefactIdentifier) Reset() {
	*x = ArtefactIdentifier{}
	mi := &file_artefact_update_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtefactIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtefactIdentifier) ProtoMessage() {}

func (x *ArtefactIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtefactIdentifier.ProtoReflect.Descriptor instead.
func (*ArtefactIdentifier) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{3}
}

func (x *ArtefactIdentifier) GetType() ArtefactType {
	if x != nil {
		return x.Type
	}
	return ArtefactType_AT_FIRMWARE
}

type ArtefactCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType string `protobuf:"bytes,1,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	Credentials    []byte `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *ArtefactCredentials) Reset() {
	*x = ArtefactCredentials{}
	mi := &file_artefact_update_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtefactCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtefactCredentials) ProtoMessage() {}

func (x *ArtefactCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtefactCredentials.ProtoReflect.Descriptor instead.
func (*ArtefactCredentials) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{4}
}

func (x *ArtefactCredentials) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *ArtefactCredentials) GetCredentials() []byte {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type DeviceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *DeviceIdentifier) Reset() {
	*x = DeviceIdentifier{}
	mi := &file_artefact_update_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIdentifier) ProtoMessage() {}

func (x *DeviceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIdentifier.ProtoReflect.Descriptor instead.
func (*DeviceIdentifier) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceIdentifier) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type DeviceCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType string `protobuf:"bytes,1,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	Credentials    []byte `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *DeviceCredentials) Reset() {
	*x = DeviceCredentials{}
	mi := &file_artefact_update_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCredentials) ProtoMessage() {}

func (x *DeviceCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCredentials.ProtoReflect.Descriptor instead.
func (*DeviceCredentials) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceCredentials) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *DeviceCredentials) GetCredentials() []byte {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type ArtefactOperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase    ArtefactOperationPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=factory_x.artefact_update.v1.ArtefactOperationPhase" json:"phase,omitempty"`
	State    ArtefactOperationState `protobuf:"varint,2,opt,name=state,proto3,enum=factory_x.artefact_update.v1.ArtefactOperationState" json:"state,omitempty"`
	Message  string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Progress uint32                 `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"` // in percent
}

func (x *ArtefactOperationStatus) Reset() {
	*x = ArtefactOperationStatus{}
	mi := &file_artefact_update_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtefactOperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtefactOperationStatus) ProtoMessage() {}

func (x *ArtefactOperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtefactOperationStatus.ProtoReflect.Descriptor instead.
func (*ArtefactOperationStatus) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{7}
}

func (x *ArtefactOperationStatus) GetPhase() ArtefactOperationPhase {
	if x != nil {
		return x.Phase
	}
	return ArtefactOperationPhase_AOP_UNSPECIFIED
}

func (x *ArtefactOperationStatus) GetState() ArtefactOperationState {
	if x != nil {
		return x.State
	}
	return ArtefactOperationState_AOS_OK
}

func (x *ArtefactOperationStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ArtefactOperationStatus) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type ArtefactOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ArtefactOperationRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=factory_x.artefact_update.v1.ArtefactOperationRequestType" json:"type,omitempty"`
}

func (x *ArtefactOperationRequest) Reset() {
	*x = ArtefactOperationRequest{}
	mi := &file_artefact_update_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtefactOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtefactOperationRequest) ProtoMessage() {}

func (x *ArtefactOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtefactOperationRequest.ProtoReflect.Descriptor instead.
func (*ArtefactOperationRequest) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{8}
}

func (x *ArtefactOperationRequest) GetType() ArtefactOperationRequestType {
	if x != nil {
		return x.Type
	}
	return ArtefactOperationRequestType_AORT_ARTEFACT_TRANSMISSION
}

type ArtefactMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ArtefactMessage_Status
	//	*ArtefactMessage_Request
	Message isArtefactMessage_Message `protobuf_oneof:"message"`
}

func (x *ArtefactMessage) Reset() {
	*x = ArtefactMessage{}
	mi := &file_artefact_update_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtefactMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtefactMessage) ProtoMessage() {}

func (x *ArtefactMessage) ProtoReflect() protoreflect.Message {
	mi := &file_artefact_update_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtefactMessage.ProtoReflect.Descriptor instead.
func (*ArtefactMessage) Descriptor() ([]byte, []int) {
	return file_artefact_update_proto_rawDescGZIP(), []int{9}
}

func (m *ArtefactMessage) GetMessage() isArtefactMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ArtefactMessage) GetStatus() *ArtefactOperationStatus {
	if x, ok := x.GetMessage().(*ArtefactMessage_Status); ok {
		return x.Status
	}
	return nil
}

func (x *ArtefactMessage) GetRequest() *ArtefactOperationRequest {
	if x, ok := x.GetMessage().(*ArtefactMessage_Request); ok {
		return x.Request
	}
	return nil
}

type isArtefactMessage_Message interface {
	isArtefactMessage_Message()
}

type ArtefactMessage_Status struct {
	Status *ArtefactOperationStatus `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type ArtefactMessage_Request struct {
	Request *ArtefactOperationRequest `protobuf:"bytes,2,opt,name=request,proto3,oneof"`
}

func (*ArtefactMessage_Status) isArtefactMessage_Message() {}

func (*ArtefactMessage_Request) isArtefactMessage_Message() {}

var File_artefact_update_proto protoreflect.FileDescriptor

var file_artefact_update_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61,
	0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61,
	0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xec, 0x03, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74,
	0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x6f, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0d, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x13,
	0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x61, 0x72, 0x74,
	0x65, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x64, 0x0a, 0x14, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61,
	0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x65, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x13, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74,
	0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x5e, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0x26, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x12, 0x41, 0x72,
	0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x60, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0x26, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x5e, 0x0a, 0x11, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x17, 0x41,
	0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72,
	0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x18, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78,
	0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2a, 0x65, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x5f, 0x53, 0x4f, 0x46, 0x54,
	0x57, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x55, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x2a, 0x94, 0x01, 0x0a, 0x16,
	0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4f, 0x53, 0x5f, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4f, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4f, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4f, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4f, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x2a, 0x9b, 0x01, 0x0a, 0x16, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4f, 0x50, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x4f, 0x50, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4f, 0x50, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x06,
	0x2a, 0x3e, 0x0a, 0x1c, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x54, 0x45, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x32, 0xdd, 0x03, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12, 0x70, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x41, 0x72,
	0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x1a, 0x2d, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e,
	0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x0c, 0x50, 0x75, 0x6c, 0x6c,
	0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x2b, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x0d, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61,
	0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x2d, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x0e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x2d, 0x2e, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x78, 0x2e, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x66,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_artefact_update_proto_rawDescOnce sync.Once
	file_artefact_update_proto_rawDescData = file_artefact_update_proto_rawDesc
)

func file_artefact_update_proto_rawDescGZIP() []byte {
	file_artefact_update_proto_rawDescOnce.Do(func() {
		file_artefact_update_proto_rawDescData = protoimpl.X.CompressGZIP(file_artefact_update_proto_rawDescData)
	})
	return file_artefact_update_proto_rawDescData
}

var file_artefact_update_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_artefact_update_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_artefact_update_proto_goTypes = []any{
	(ArtefactType)(0),                 // 0: factory_x.artefact_update.v1.ArtefactType
	(ArtefactOperationState)(0),       // 1: factory_x.artefact_update.v1.ArtefactOperationState
	(ArtefactOperationPhase)(0),       // 2: factory_x.artefact_update.v1.ArtefactOperationPhase
	(ArtefactOperationRequestType)(0), // 3: factory_x.artefact_update.v1.ArtefactOperationRequestType
	(*ArtefactChunk)(nil),             // 4: factory_x.artefact_update.v1.ArtefactChunk
	(*ArtefactMetaData)(nil),          // 5: factory_x.artefact_update.v1.ArtefactMetaData
	(*JobIdentifier)(nil),             // 6: factory_x.artefact_update.v1.JobIdentifier
	(*ArtefactIdentifier)(nil),        // 7: factory_x.artefact_update.v1.ArtefactIdentifier
	(*ArtefactCredentials)(nil),       // 8: factory_x.artefact_update.v1.ArtefactCredentials
	(*DeviceIdentifier)(nil),          // 9: factory_x.artefact_update.v1.DeviceIdentifier
	(*DeviceCredentials)(nil),         // 10: factory_x.artefact_update.v1.DeviceCredentials
	(*ArtefactOperationStatus)(nil),   // 11: factory_x.artefact_update.v1.ArtefactOperationStatus
	(*ArtefactOperationRequest)(nil),  // 12: factory_x.artefact_update.v1.ArtefactOperationRequest
	(*ArtefactMessage)(nil),           // 13: factory_x.artefact_update.v1.ArtefactMessage
}
var file_artefact_update_proto_depIdxs = []int32{
	5,  // 0: factory_x.artefact_update.v1.ArtefactChunk.metadata:type_name -> factory_x.artefact_update.v1.ArtefactMetaData
	11, // 1: factory_x.artefact_update.v1.ArtefactChunk.status:type_name -> factory_x.artefact_update.v1.ArtefactOperationStatus
	6,  // 2: factory_x.artefact_update.v1.ArtefactMetaData.job_identifier:type_name -> factory_x.artefact_update.v1.JobIdentifier
	7,  // 3: factory_x.artefact_update.v1.ArtefactMetaData.artefact_identifier:type_name -> factory_x.artefact_update.v1.ArtefactIdentifier
	8,  // 4: factory_x.artefact_update.v1.ArtefactMetaData.artefact_credentials:type_name -> factory_x.artefact_update.v1.ArtefactCredentials
	9,  // 5: factory_x.artefact_update.v1.ArtefactMetaData.device_identifier:type_name -> factory_x.artefact_update.v1.DeviceIdentifier
	10, // 6: factory_x.artefact_update.v1.ArtefactMetaData.device_credentials:type_name -> factory_x.artefact_update.v1.DeviceCredentials
	0,  // 7: factory_x.artefact_update.v1.ArtefactIdentifier.type:type_name -> factory_x.artefact_update.v1.ArtefactType
	2,  // 8: factory_x.artefact_update.v1.ArtefactOperationStatus.phase:type_name -> factory_x.artefact_update.v1.ArtefactOperationPhase
	1,  // 9: factory_x.artefact_update.v1.ArtefactOperationStatus.state:type_name -> factory_x.artefact_update.v1.ArtefactOperationState
	3,  // 10: factory_x.artefact_update.v1.ArtefactOperationRequest.type:type_name -> factory_x.artefact_update.v1.ArtefactOperationRequestType
	11, // 11: factory_x.artefact_update.v1.ArtefactMessage.status:type_name -> factory_x.artefact_update.v1.ArtefactOperationStatus
	12, // 12: factory_x.artefact_update.v1.ArtefactMessage.request:type_name -> factory_x.artefact_update.v1.ArtefactOperationRequest
	4,  // 13: factory_x.artefact_update.v1.ArtefactUpdateApi.PushArtefact:input_type -> factory_x.artefact_update.v1.ArtefactChunk
	5,  // 14: factory_x.artefact_update.v1.ArtefactUpdateApi.PullArtefact:input_type -> factory_x.artefact_update.v1.ArtefactMetaData
	4,  // 15: factory_x.artefact_update.v1.ArtefactUpdateApi.PrepareUpdate:input_type -> factory_x.artefact_update.v1.ArtefactChunk
	4,  // 16: factory_x.artefact_update.v1.ArtefactUpdateApi.ActivateUpdate:input_type -> factory_x.artefact_update.v1.ArtefactChunk
	13, // 17: factory_x.artefact_update.v1.ArtefactUpdateApi.PushArtefact:output_type -> factory_x.artefact_update.v1.ArtefactMessage
	4,  // 18: factory_x.artefact_update.v1.ArtefactUpdateApi.PullArtefact:output_type -> factory_x.artefact_update.v1.ArtefactChunk
	13, // 19: factory_x.artefact_update.v1.ArtefactUpdateApi.PrepareUpdate:output_type -> factory_x.artefact_update.v1.ArtefactMessage
	13, // 20: factory_x.artefact_update.v1.ArtefactUpdateApi.ActivateUpdate:output_type -> factory_x.artefact_update.v1.ArtefactMessage
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_artefact_update_proto_init() }
func file_artefact_update_proto_init() {
	if File_artefact_update_proto != nil {
		return
	}
	file_artefact_update_proto_msgTypes[0].OneofWrappers = []any{
		(*ArtefactChunk_Metadata)(nil),
		(*ArtefactChunk_FileContent)(nil),
		(*ArtefactChunk_Status)(nil),
	}
	file_artefact_update_proto_msgTypes[9].OneofWrappers = []any{
		(*ArtefactMessage_Status)(nil),
		(*ArtefactMessage_Request)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artefact_update_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_artefact_update_proto_goTypes,
		DependencyIndexes: file_artefact_update_proto_depIdxs,
		EnumInfos:         file_artefact_update_proto_enumTypes,
		MessageInfos:      file_artefact_update_proto_msgTypes,
	}.Build()
	File_artefact_update_proto = out.File
	file_artefact_update_proto_rawDesc = nil
	file_artefact_update_proto_goTypes = nil
	file_artefact_update_proto_depIdxs = nil
}
