// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: firmware-update.proto

package firmware_update

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FirmwareupdateApi_FirmwareDownload_FullMethodName = "/siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi/FirmwareDownload"
	FirmwareupdateApi_FirmwareInstall_FullMethodName  = "/siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi/FirmwareInstall"
	FirmwareupdateApi_FirmwareActivate_FullMethodName = "/siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi/FirmwareActivate"
	FirmwareupdateApi_FirmwareUpdate_FullMethodName   = "/siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi/FirmwareUpdate"
	FirmwareupdateApi_FirmwareCancel_FullMethodName   = "/siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi/FirmwareCancel"
)

// FirmwareupdateApiClient is the client API for FirmwareupdateApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirmwareupdateApiClient interface {
	// firmware(s) will be downloaded in to the device
	FirmwareDownload(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (FirmwareupdateApi_FirmwareDownloadClient, error)
	// downloaded firmware(s) installed in the device
	FirmwareInstall(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (FirmwareupdateApi_FirmwareInstallClient, error)
	// downloaded fimrware(s) activated in the device
	FirmwareActivate(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (FirmwareupdateApi_FirmwareActivateClient, error)
	// fimrware(s) downloaded/installed/activated in the device
	FirmwareUpdate(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (FirmwareupdateApi_FirmwareUpdateClient, error)
	// firmware operation cancelled in the device
	FirmwareCancel(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (*FirmwareReply, error)
}

type firmwareupdateApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFirmwareupdateApiClient(cc grpc.ClientConnInterface) FirmwareupdateApiClient {
	return &firmwareupdateApiClient{cc}
}

func (c *firmwareupdateApiClient) FirmwareDownload(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (FirmwareupdateApi_FirmwareDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FirmwareupdateApi_ServiceDesc.Streams[0], FirmwareupdateApi_FirmwareDownload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &firmwareupdateApiFirmwareDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FirmwareupdateApi_FirmwareDownloadClient interface {
	Recv() (*FirmwareReply, error)
	grpc.ClientStream
}

type firmwareupdateApiFirmwareDownloadClient struct {
	grpc.ClientStream
}

func (x *firmwareupdateApiFirmwareDownloadClient) Recv() (*FirmwareReply, error) {
	m := new(FirmwareReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *firmwareupdateApiClient) FirmwareInstall(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (FirmwareupdateApi_FirmwareInstallClient, error) {
	stream, err := c.cc.NewStream(ctx, &FirmwareupdateApi_ServiceDesc.Streams[1], FirmwareupdateApi_FirmwareInstall_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &firmwareupdateApiFirmwareInstallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FirmwareupdateApi_FirmwareInstallClient interface {
	Recv() (*FirmwareReply, error)
	grpc.ClientStream
}

type firmwareupdateApiFirmwareInstallClient struct {
	grpc.ClientStream
}

func (x *firmwareupdateApiFirmwareInstallClient) Recv() (*FirmwareReply, error) {
	m := new(FirmwareReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *firmwareupdateApiClient) FirmwareActivate(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (FirmwareupdateApi_FirmwareActivateClient, error) {
	stream, err := c.cc.NewStream(ctx, &FirmwareupdateApi_ServiceDesc.Streams[2], FirmwareupdateApi_FirmwareActivate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &firmwareupdateApiFirmwareActivateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FirmwareupdateApi_FirmwareActivateClient interface {
	Recv() (*FirmwareReply, error)
	grpc.ClientStream
}

type firmwareupdateApiFirmwareActivateClient struct {
	grpc.ClientStream
}

func (x *firmwareupdateApiFirmwareActivateClient) Recv() (*FirmwareReply, error) {
	m := new(FirmwareReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *firmwareupdateApiClient) FirmwareUpdate(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (FirmwareupdateApi_FirmwareUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &FirmwareupdateApi_ServiceDesc.Streams[3], FirmwareupdateApi_FirmwareUpdate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &firmwareupdateApiFirmwareUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FirmwareupdateApi_FirmwareUpdateClient interface {
	Recv() (*FirmwareReply, error)
	grpc.ClientStream
}

type firmwareupdateApiFirmwareUpdateClient struct {
	grpc.ClientStream
}

func (x *firmwareupdateApiFirmwareUpdateClient) Recv() (*FirmwareReply, error) {
	m := new(FirmwareReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *firmwareupdateApiClient) FirmwareCancel(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (*FirmwareReply, error) {
	out := new(FirmwareReply)
	err := c.cc.Invoke(ctx, FirmwareupdateApi_FirmwareCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirmwareupdateApiServer is the server API for FirmwareupdateApi service.
// All implementations must embed UnimplementedFirmwareupdateApiServer
// for forward compatibility
type FirmwareupdateApiServer interface {
	// firmware(s) will be downloaded in to the device
	FirmwareDownload(*FirmwareRequest, FirmwareupdateApi_FirmwareDownloadServer) error
	// downloaded firmware(s) installed in the device
	FirmwareInstall(*FirmwareRequest, FirmwareupdateApi_FirmwareInstallServer) error
	// downloaded fimrware(s) activated in the device
	FirmwareActivate(*FirmwareRequest, FirmwareupdateApi_FirmwareActivateServer) error
	// fimrware(s) downloaded/installed/activated in the device
	FirmwareUpdate(*FirmwareRequest, FirmwareupdateApi_FirmwareUpdateServer) error
	// firmware operation cancelled in the device
	FirmwareCancel(context.Context, *FirmwareRequest) (*FirmwareReply, error)
	mustEmbedUnimplementedFirmwareupdateApiServer()
}

// UnimplementedFirmwareupdateApiServer must be embedded to have forward compatible implementations.
type UnimplementedFirmwareupdateApiServer struct {
}

func (UnimplementedFirmwareupdateApiServer) FirmwareDownload(*FirmwareRequest, FirmwareupdateApi_FirmwareDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method FirmwareDownload not implemented")
}
func (UnimplementedFirmwareupdateApiServer) FirmwareInstall(*FirmwareRequest, FirmwareupdateApi_FirmwareInstallServer) error {
	return status.Errorf(codes.Unimplemented, "method FirmwareInstall not implemented")
}
func (UnimplementedFirmwareupdateApiServer) FirmwareActivate(*FirmwareRequest, FirmwareupdateApi_FirmwareActivateServer) error {
	return status.Errorf(codes.Unimplemented, "method FirmwareActivate not implemented")
}
func (UnimplementedFirmwareupdateApiServer) FirmwareUpdate(*FirmwareRequest, FirmwareupdateApi_FirmwareUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method FirmwareUpdate not implemented")
}
func (UnimplementedFirmwareupdateApiServer) FirmwareCancel(context.Context, *FirmwareRequest) (*FirmwareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareCancel not implemented")
}
func (UnimplementedFirmwareupdateApiServer) mustEmbedUnimplementedFirmwareupdateApiServer() {}

// UnsafeFirmwareupdateApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirmwareupdateApiServer will
// result in compilation errors.
type UnsafeFirmwareupdateApiServer interface {
	mustEmbedUnimplementedFirmwareupdateApiServer()
}

func RegisterFirmwareupdateApiServer(s grpc.ServiceRegistrar, srv FirmwareupdateApiServer) {
	s.RegisterService(&FirmwareupdateApi_ServiceDesc, srv)
}

func _FirmwareupdateApi_FirmwareDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FirmwareRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FirmwareupdateApiServer).FirmwareDownload(m, &firmwareupdateApiFirmwareDownloadServer{stream})
}

type FirmwareupdateApi_FirmwareDownloadServer interface {
	Send(*FirmwareReply) error
	grpc.ServerStream
}

type firmwareupdateApiFirmwareDownloadServer struct {
	grpc.ServerStream
}

func (x *firmwareupdateApiFirmwareDownloadServer) Send(m *FirmwareReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FirmwareupdateApi_FirmwareInstall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FirmwareRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FirmwareupdateApiServer).FirmwareInstall(m, &firmwareupdateApiFirmwareInstallServer{stream})
}

type FirmwareupdateApi_FirmwareInstallServer interface {
	Send(*FirmwareReply) error
	grpc.ServerStream
}

type firmwareupdateApiFirmwareInstallServer struct {
	grpc.ServerStream
}

func (x *firmwareupdateApiFirmwareInstallServer) Send(m *FirmwareReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FirmwareupdateApi_FirmwareActivate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FirmwareRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FirmwareupdateApiServer).FirmwareActivate(m, &firmwareupdateApiFirmwareActivateServer{stream})
}

type FirmwareupdateApi_FirmwareActivateServer interface {
	Send(*FirmwareReply) error
	grpc.ServerStream
}

type firmwareupdateApiFirmwareActivateServer struct {
	grpc.ServerStream
}

func (x *firmwareupdateApiFirmwareActivateServer) Send(m *FirmwareReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FirmwareupdateApi_FirmwareUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FirmwareRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FirmwareupdateApiServer).FirmwareUpdate(m, &firmwareupdateApiFirmwareUpdateServer{stream})
}

type FirmwareupdateApi_FirmwareUpdateServer interface {
	Send(*FirmwareReply) error
	grpc.ServerStream
}

type firmwareupdateApiFirmwareUpdateServer struct {
	grpc.ServerStream
}

func (x *firmwareupdateApiFirmwareUpdateServer) Send(m *FirmwareReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FirmwareupdateApi_FirmwareCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareupdateApiServer).FirmwareCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareupdateApi_FirmwareCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareupdateApiServer).FirmwareCancel(ctx, req.(*FirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FirmwareupdateApi_ServiceDesc is the grpc.ServiceDesc for FirmwareupdateApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirmwareupdateApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi",
	HandlerType: (*FirmwareupdateApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FirmwareCancel",
			Handler:    _FirmwareupdateApi_FirmwareCancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FirmwareDownload",
			Handler:       _FirmwareupdateApi_FirmwareDownload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FirmwareInstall",
			Handler:       _FirmwareupdateApi_FirmwareInstall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FirmwareActivate",
			Handler:       _FirmwareupdateApi_FirmwareActivate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FirmwareUpdate",
			Handler:       _FirmwareupdateApi_FirmwareUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "firmware-update.proto",
}
