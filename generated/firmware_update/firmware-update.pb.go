// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: firmware-update.proto

package firmware_update

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FirmwareOperation int32

const (
	FirmwareOperation_DOWNLOAD FirmwareOperation = 0
	FirmwareOperation_INSTALL  FirmwareOperation = 1
	FirmwareOperation_ACTIVATE FirmwareOperation = 2
)

// Enum value maps for FirmwareOperation.
var (
	FirmwareOperation_name = map[int32]string{
		0: "DOWNLOAD",
		1: "INSTALL",
		2: "ACTIVATE",
	}
	FirmwareOperation_value = map[string]int32{
		"DOWNLOAD": 0,
		"INSTALL":  1,
		"ACTIVATE": 2,
	}
)

func (x FirmwareOperation) Enum() *FirmwareOperation {
	p := new(FirmwareOperation)
	*p = x
	return p
}

func (x FirmwareOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirmwareOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_firmware_update_proto_enumTypes[0].Descriptor()
}

func (FirmwareOperation) Type() protoreflect.EnumType {
	return &file_firmware_update_proto_enumTypes[0]
}

func (x FirmwareOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirmwareOperation.Descriptor instead.
func (FirmwareOperation) EnumDescriptor() ([]byte, []int) {
	return file_firmware_update_proto_rawDescGZIP(), []int{0}
}

type FirmwareUpdateMode int32

const (
	FirmwareUpdateMode_IF_DIFFERENT FirmwareUpdateMode = 0
	FirmwareUpdateMode_ALWAYS       FirmwareUpdateMode = 1
	FirmwareUpdateMode_UPGRADE      FirmwareUpdateMode = 2
)

// Enum value maps for FirmwareUpdateMode.
var (
	FirmwareUpdateMode_name = map[int32]string{
		0: "IF_DIFFERENT",
		1: "ALWAYS",
		2: "UPGRADE",
	}
	FirmwareUpdateMode_value = map[string]int32{
		"IF_DIFFERENT": 0,
		"ALWAYS":       1,
		"UPGRADE":      2,
	}
)

func (x FirmwareUpdateMode) Enum() *FirmwareUpdateMode {
	p := new(FirmwareUpdateMode)
	*p = x
	return p
}

func (x FirmwareUpdateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirmwareUpdateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_firmware_update_proto_enumTypes[1].Descriptor()
}

func (FirmwareUpdateMode) Type() protoreflect.EnumType {
	return &file_firmware_update_proto_enumTypes[1]
}

func (x FirmwareUpdateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirmwareUpdateMode.Descriptor instead.
func (FirmwareUpdateMode) EnumDescriptor() ([]byte, []int) {
	return file_firmware_update_proto_rawDescGZIP(), []int{1}
}

type FirmwareStatus int32

const (
	FirmwareStatus_SUCCESS     FirmwareStatus = 0
	FirmwareStatus_TIMEDOUT    FirmwareStatus = 1
	FirmwareStatus_IN_PROGRESS FirmwareStatus = 2
	FirmwareStatus_ABORTED     FirmwareStatus = 3
	FirmwareStatus_FAILED      FirmwareStatus = 4
)

// Enum value maps for FirmwareStatus.
var (
	FirmwareStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "TIMEDOUT",
		2: "IN_PROGRESS",
		3: "ABORTED",
		4: "FAILED",
	}
	FirmwareStatus_value = map[string]int32{
		"SUCCESS":     0,
		"TIMEDOUT":    1,
		"IN_PROGRESS": 2,
		"ABORTED":     3,
		"FAILED":      4,
	}
)

func (x FirmwareStatus) Enum() *FirmwareStatus {
	p := new(FirmwareStatus)
	*p = x
	return p
}

func (x FirmwareStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirmwareStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_firmware_update_proto_enumTypes[2].Descriptor()
}

func (FirmwareStatus) Type() protoreflect.EnumType {
	return &file_firmware_update_proto_enumTypes[2]
}

func (x FirmwareStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirmwareStatus.Descriptor instead.
func (FirmwareStatus) EnumDescriptor() ([]byte, []int) {
	return file_firmware_update_proto_rawDescGZIP(), []int{2}
}

type FirmwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the device used to uniquely identify the device
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// unique job_id (kind of request identifier)
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// time to wait in seconds
	Timeout int32 `protobuf:"zigzag32,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// retry count
	Retry int32 `protobuf:"zigzag32,4,opt,name=retry,proto3" json:"retry,omitempty"`
	// meta data of firmware(s)
	MetaData []*FirmwareMetaData `protobuf:"bytes,5,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *FirmwareRequest) Reset() {
	*x = FirmwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firmware_update_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareRequest) ProtoMessage() {}

func (x *FirmwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firmware_update_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareRequest.ProtoReflect.Descriptor instead.
func (*FirmwareRequest) Descriptor() ([]byte, []int) {
	return file_firmware_update_proto_rawDescGZIP(), []int{0}
}

func (x *FirmwareRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *FirmwareRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *FirmwareRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *FirmwareRequest) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *FirmwareRequest) GetMetaData() []*FirmwareMetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type FirmwareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the device used to uniquely identify the device
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// unique job_id (kind of request identifier)
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// firmware operation progress information
	ProgressStatus *ProgressInfo `protobuf:"bytes,3,opt,name=progress_status,json=progressStatus,proto3" json:"progress_status,omitempty"`
	// firmware operation status
	Status FirmwareStatus `protobuf:"varint,4,opt,name=status,proto3,enum=siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareStatus" json:"status,omitempty"`
	// error message in case of any error
	ErrorMsg string `protobuf:"bytes,5,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *FirmwareReply) Reset() {
	*x = FirmwareReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firmware_update_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareReply) ProtoMessage() {}

func (x *FirmwareReply) ProtoReflect() protoreflect.Message {
	mi := &file_firmware_update_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareReply.ProtoReflect.Descriptor instead.
func (*FirmwareReply) Descriptor() ([]byte, []int) {
	return file_firmware_update_proto_rawDescGZIP(), []int{1}
}

func (x *FirmwareReply) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *FirmwareReply) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *FirmwareReply) GetProgressStatus() *ProgressInfo {
	if x != nil {
		return x.ProgressStatus
	}
	return nil
}

func (x *FirmwareReply) GetStatus() FirmwareStatus {
	if x != nil {
		return x.Status
	}
	return FirmwareStatus_SUCCESS
}

func (x *FirmwareReply) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type ProgressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of firmware operation
	Operation FirmwareOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareOperation" json:"operation,omitempty"`
	// percentage of progress
	Percentage string `protobuf:"bytes,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *ProgressInfo) Reset() {
	*x = ProgressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firmware_update_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressInfo) ProtoMessage() {}

func (x *ProgressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_firmware_update_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressInfo.ProtoReflect.Descriptor instead.
func (*ProgressInfo) Descriptor() ([]byte, []int) {
	return file_firmware_update_proto_rawDescGZIP(), []int{2}
}

func (x *ProgressInfo) GetOperation() FirmwareOperation {
	if x != nil {
		return x.Operation
	}
	return FirmwareOperation_DOWNLOAD
}

func (x *ProgressInfo) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

type FirmwareMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// firmware file name(path)
	FirmwareFile string `protobuf:"bytes,1,opt,name=firmware_file,json=firmwareFile,proto3" json:"firmware_file,omitempty"`
	// firmware version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// compatible version in device
	CompatibleVersion []string `protobuf:"bytes,3,rep,name=compatible_version,json=compatibleVersion,proto3" json:"compatible_version,omitempty"`
	// firmware update mode
	Mode FirmwareUpdateMode `protobuf:"varint,4,opt,name=mode,proto3,enum=siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareUpdateMode" json:"mode,omitempty"`
	// additional details or properties of meta data (like snmp profile name)
	Properties map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FirmwareMetaData) Reset() {
	*x = FirmwareMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firmware_update_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareMetaData) ProtoMessage() {}

func (x *FirmwareMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_firmware_update_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareMetaData.ProtoReflect.Descriptor instead.
func (*FirmwareMetaData) Descriptor() ([]byte, []int) {
	return file_firmware_update_proto_rawDescGZIP(), []int{3}
}

func (x *FirmwareMetaData) GetFirmwareFile() string {
	if x != nil {
		return x.FirmwareFile
	}
	return ""
}

func (x *FirmwareMetaData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FirmwareMetaData) GetCompatibleVersion() []string {
	if x != nil {
		return x.CompatibleVersion
	}
	return nil
}

func (x *FirmwareMetaData) GetMode() FirmwareUpdateMode {
	if x != nil {
		return x.Mode
	}
	return FirmwareUpdateMode_IF_DIFFERENT
}

func (x *FirmwareMetaData) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

var File_firmware_update_proto protoreflect.FileDescriptor

var file_firmware_update_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0xd9, 0x01, 0x0a,
	0x0f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x02, 0x0a, 0x0d, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x6a,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x73, 0x69, 0x65,
	0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65,
	0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x10,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x73,
	0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0x3c, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a,
	0x3f, 0x0a, 0x12, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x46, 0x5f, 0x44, 0x49, 0x46, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59,
	0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02,
	0x2a, 0x55, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0xbb, 0x06, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12, 0xa0, 0x01,
	0x0a, 0x10, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x44, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65,
	0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x73, 0x69, 0x65,
	0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x30, 0x01, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x44, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e,
	0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x9e, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65,
	0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42,
	0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x44, 0x2e, 0x73, 0x69, 0x65, 0x6d,
	0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x42, 0x2e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_firmware_update_proto_rawDescOnce sync.Once
	file_firmware_update_proto_rawDescData = file_firmware_update_proto_rawDesc
)

func file_firmware_update_proto_rawDescGZIP() []byte {
	file_firmware_update_proto_rawDescOnce.Do(func() {
		file_firmware_update_proto_rawDescData = protoimpl.X.CompressGZIP(file_firmware_update_proto_rawDescData)
	})
	return file_firmware_update_proto_rawDescData
}

var file_firmware_update_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_firmware_update_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_firmware_update_proto_goTypes = []interface{}{
	(FirmwareOperation)(0),   // 0: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareOperation
	(FirmwareUpdateMode)(0),  // 1: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareUpdateMode
	(FirmwareStatus)(0),      // 2: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareStatus
	(*FirmwareRequest)(nil),  // 3: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareRequest
	(*FirmwareReply)(nil),    // 4: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareReply
	(*ProgressInfo)(nil),     // 5: siemens.commondevicemanagement.firmwareupdateApi.v1.ProgressInfo
	(*FirmwareMetaData)(nil), // 6: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareMetaData
	nil,                      // 7: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareMetaData.PropertiesEntry
}
var file_firmware_update_proto_depIdxs = []int32{
	6,  // 0: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareRequest.meta_data:type_name -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareMetaData
	5,  // 1: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareReply.progress_status:type_name -> siemens.commondevicemanagement.firmwareupdateApi.v1.ProgressInfo
	2,  // 2: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareReply.status:type_name -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareStatus
	0,  // 3: siemens.commondevicemanagement.firmwareupdateApi.v1.ProgressInfo.operation:type_name -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareOperation
	1,  // 4: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareMetaData.mode:type_name -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareUpdateMode
	7,  // 5: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareMetaData.properties:type_name -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareMetaData.PropertiesEntry
	3,  // 6: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareDownload:input_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareRequest
	3,  // 7: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareInstall:input_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareRequest
	3,  // 8: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareActivate:input_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareRequest
	3,  // 9: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareUpdate:input_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareRequest
	3,  // 10: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareCancel:input_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareRequest
	4,  // 11: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareDownload:output_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareReply
	4,  // 12: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareInstall:output_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareReply
	4,  // 13: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareActivate:output_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareReply
	4,  // 14: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareUpdate:output_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareReply
	4,  // 15: siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareupdateApi.FirmwareCancel:output_type -> siemens.commondevicemanagement.firmwareupdateApi.v1.FirmwareReply
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_firmware_update_proto_init() }
func file_firmware_update_proto_init() {
	if File_firmware_update_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_firmware_update_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firmware_update_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firmware_update_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firmware_update_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_firmware_update_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_firmware_update_proto_goTypes,
		DependencyIndexes: file_firmware_update_proto_depIdxs,
		EnumInfos:         file_firmware_update_proto_enumTypes,
		MessageInfos:      file_firmware_update_proto_msgTypes,
	}.Build()
	File_firmware_update_proto = out.File
	file_firmware_update_proto_rawDesc = nil
	file_firmware_update_proto_goTypes = nil
	file_firmware_update_proto_depIdxs = nil
}
