// ------------------------------------------------------------------
// Connectivity Suite Driver Version Service
// ------------------------------------------------------------------
//
// Naming convention according:
// https://cloud.google.com/apis/design/naming_convention
//
// ------------------------------------------------------------------

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: conn_suite_drv_info.proto

package conn_suite_drv_info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DriverInfoApi_GetVersionInfo_FullMethodName  = "/siemens.connectivitysuite.drvinfo.v1.DriverInfoApi/GetVersionInfo"
	DriverInfoApi_GetConfigSchema_FullMethodName = "/siemens.connectivitysuite.drvinfo.v1.DriverInfoApi/GetConfigSchema"
	DriverInfoApi_GetAppIcon_FullMethodName      = "/siemens.connectivitysuite.drvinfo.v1.DriverInfoApi/GetAppIcon"
)

// DriverInfoApiClient is the client API for DriverInfoApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===========================================
// The Services Definition
type DriverInfoApiClient interface {
	// Possible return values
	// - OK
	GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error)
	// Possible return values
	// - OK
	// - FAILED_PRECONDITION - no local configuration available (or accessible)
	GetConfigSchema(ctx context.Context, in *GetConfigSchemaRequest, opts ...grpc.CallOption) (*GetConfigSchemaResponse, error)
	// implementation of this call is optional
	// Possible return values
	// - OK
	// - UNIMPLEMENTED - function not supported
	// - INVALID_ARGUMENT - parameters are wrong
	// - FAILED_PRECONDITION - icon not available
	GetAppIcon(ctx context.Context, in *GetAppIconRequest, opts ...grpc.CallOption) (*GetAppIconResponse, error)
}

type driverInfoApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverInfoApiClient(cc grpc.ClientConnInterface) DriverInfoApiClient {
	return &driverInfoApiClient{cc}
}

func (c *driverInfoApiClient) GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionInfoResponse)
	err := c.cc.Invoke(ctx, DriverInfoApi_GetVersionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInfoApiClient) GetConfigSchema(ctx context.Context, in *GetConfigSchemaRequest, opts ...grpc.CallOption) (*GetConfigSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigSchemaResponse)
	err := c.cc.Invoke(ctx, DriverInfoApi_GetConfigSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInfoApiClient) GetAppIcon(ctx context.Context, in *GetAppIconRequest, opts ...grpc.CallOption) (*GetAppIconResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppIconResponse)
	err := c.cc.Invoke(ctx, DriverInfoApi_GetAppIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverInfoApiServer is the server API for DriverInfoApi service.
// All implementations must embed UnimplementedDriverInfoApiServer
// for forward compatibility.
//
// ===========================================
// The Services Definition
type DriverInfoApiServer interface {
	// Possible return values
	// - OK
	GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error)
	// Possible return values
	// - OK
	// - FAILED_PRECONDITION - no local configuration available (or accessible)
	GetConfigSchema(context.Context, *GetConfigSchemaRequest) (*GetConfigSchemaResponse, error)
	// implementation of this call is optional
	// Possible return values
	// - OK
	// - UNIMPLEMENTED - function not supported
	// - INVALID_ARGUMENT - parameters are wrong
	// - FAILED_PRECONDITION - icon not available
	GetAppIcon(context.Context, *GetAppIconRequest) (*GetAppIconResponse, error)
	mustEmbedUnimplementedDriverInfoApiServer()
}

// UnimplementedDriverInfoApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriverInfoApiServer struct{}

func (UnimplementedDriverInfoApiServer) GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionInfo not implemented")
}
func (UnimplementedDriverInfoApiServer) GetConfigSchema(context.Context, *GetConfigSchemaRequest) (*GetConfigSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigSchema not implemented")
}
func (UnimplementedDriverInfoApiServer) GetAppIcon(context.Context, *GetAppIconRequest) (*GetAppIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppIcon not implemented")
}
func (UnimplementedDriverInfoApiServer) mustEmbedUnimplementedDriverInfoApiServer() {}
func (UnimplementedDriverInfoApiServer) testEmbeddedByValue()                       {}

// UnsafeDriverInfoApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverInfoApiServer will
// result in compilation errors.
type UnsafeDriverInfoApiServer interface {
	mustEmbedUnimplementedDriverInfoApiServer()
}

func RegisterDriverInfoApiServer(s grpc.ServiceRegistrar, srv DriverInfoApiServer) {
	// If the following call pancis, it indicates UnimplementedDriverInfoApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DriverInfoApi_ServiceDesc, srv)
}

func _DriverInfoApi_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInfoApiServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInfoApi_GetVersionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInfoApiServer).GetVersionInfo(ctx, req.(*GetVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInfoApi_GetConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInfoApiServer).GetConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInfoApi_GetConfigSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInfoApiServer).GetConfigSchema(ctx, req.(*GetConfigSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInfoApi_GetAppIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInfoApiServer).GetAppIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInfoApi_GetAppIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInfoApiServer).GetAppIcon(ctx, req.(*GetAppIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverInfoApi_ServiceDesc is the grpc.ServiceDesc for DriverInfoApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverInfoApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "siemens.connectivitysuite.drvinfo.v1.DriverInfoApi",
	HandlerType: (*DriverInfoApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersionInfo",
			Handler:    _DriverInfoApi_GetVersionInfo_Handler,
		},
		{
			MethodName: "GetConfigSchema",
			Handler:    _DriverInfoApi_GetConfigSchema_Handler,
		},
		{
			MethodName: "GetAppIcon",
			Handler:    _DriverInfoApi_GetAppIcon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conn_suite_drv_info.proto",
}
