# SPDX-FileCopyrightText: 2024 Siemens AG
#
# SPDX-License-Identifier: MIT

name: Go

on:
  push:
  pull_request:

permissions:
  contents: write
  packages: write

env:
  GOPRIVATE: github.com/industrial-asset-hub
  GO_MINIMAL_VERSION: 1.23
  TEST_PROJECT: cookiecutter-test
  TEST_PROJECT_NAME: test-asset-link

jobs:
  reuse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v5

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        uses: ./.github/actions/prepare
      - name: Generate Code
        run: go generate -v ./...
      - name: Compare Result
        run: git diff --exit-code -w -G'(^[^\*# /])|(^#\w)|(^\s+[^\*#/])'

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        uses: ./.github/actions/prepare
      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        uses: ./.github/actions/prepare
      - name: Test
        run: go test -v ./...

  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Vulnerability Check
        uses: golang/govulncheck-action@v1
        with:
          go-package: ./...

  build-sdk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        uses: ./.github/actions/prepare
      - name: Build
        run: go build -v ./...
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

  build-asset-link:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.23", "1.24", "stable"]
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        with:
          go-version: ${{ matrix.go-version }}
        uses: ./.github/actions/prepare
      - name: Install Cookiecutter
        run: |
          python -m pip install pipx
          python -m pipx ensurepath
          pipx install cookiecutter
          export PATH="$PATH:/root/.local/bin"
          cookiecutter --version
      - name: Create Asset Link
        run: |
          mkdir -p $TEST_PROJECT/
          cd $TEST_PROJECT/
          cookiecutter $GITHUB_WORKSPACE/cookiecutter-project-template/ --replay --replay-file $GITHUB_WORKSPACE/cookiecutter-project-template/cookiecutter-project-template.json
      - name: Adjust Dependencies
        run: |
          cd $TEST_PROJECT/$TEST_PROJECT_NAME/
          go get github.com/${GITHUB_REPOSITORY}/v3
          go mod edit -replace=github.com/${GITHUB_REPOSITORY}/v3=${GITHUB_WORKSPACE}
          go mod edit -go=$GO_MINIMAL_VERSION
          go mod edit -toolchain=none
          go mod tidy
          go mod download
      - name: Build Asset Link
        run: |
          cd $TEST_PROJECT/$TEST_PROJECT_NAME/
          go build -v ./...
      - name: Test Asset Link
        run: |
          cd $TEST_PROJECT/$TEST_PROJECT_NAME/
          go test -v ./...
      - name: Lint Asset Link
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
          working-directory: ${{ env.TEST_PROJECT }}/${{ env.TEST_PROJECT_NAME }}/
      - name: Test Goreleaser Config (dry-run)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          workdir: ${{ env.TEST_PROJECT }}/${{ env.TEST_PROJECT_NAME }}/
          args: release --clean --snapshot

  release-sdk:
    runs-on: ubuntu-latest
    needs: [reuse, generate, lint, test, check, build-sdk, build-asset-link]
    if: github.event_name != 'pull_request' && github.ref_type == 'tag'
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        uses: ./.github/actions/prepare
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to GitHub Container Registry (GHCR.io)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Release (official)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-sdk-dry-run:
    runs-on: ubuntu-latest
    needs: [reuse, generate, lint, test, check, build-sdk, build-asset-link]
    if: github.event_name == 'pull_request' || github.ref_type != 'tag'
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        uses: ./.github/actions/prepare
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Release (dry-run)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
